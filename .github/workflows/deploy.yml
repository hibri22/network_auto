name: Deploy to Azure VM

on:
  push:
    branches:
      - main  # Runs when code is pushed to 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Verify SSH Connection
      run: |
        echo "Verifying SSH connection..."
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_PUBLIC_IP }} "echo SSH Connection Successful"
      continue-on-error: false  # Fail the job if SSH fails

    - name: Create target directory on VM (if not exists)
      run: |
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_PUBLIC_IP }} "mkdir -p /home/${{ secrets.AZURE_VM_USERNAME }}/app"

    - name: Deploy files to VM
      run: |
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" scp -o StrictHostKeyChecking=no -r * ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_PUBLIC_IP }}:/home/${{ secrets.AZURE_VM_USERNAME }}/app/

    - name: Deploy Docker Container on VM
      run: |
        sshpass -p "${{ secrets.AZURE_VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_PUBLIC_IP }} << 'EOF'
        # Ensure Docker is installed
        sudo apt update && sudo apt install -y docker.io

        # Stop and remove old container if running
        docker stop web-app || true
        docker rm web-app || true

        # Remove old images to free up space (optional)
        docker rmi my-web-app:latest || true

        # Navigate to project directory
        cd /home/${{ secrets.AZURE_VM_USERNAME }}/app/

        # Build and run the Docker container
        docker build -t my-web-app:latest .
        docker run -d -p 80:80 --name web-app my-web-app:latest
        EOF


